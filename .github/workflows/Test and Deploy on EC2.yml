# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Maven Package

on:
 push:
    branches: [ "main" ]
 pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Build with Maven
      run: mvn -B clean package --file pom.xml

    - name: Deploy on AWS EC2
      env:
        PRIVATE_KEY: ${{ secrets.LOCAL_SSH_KEY  }}
        HOSTNAME: ${{ secrets.LOCAL_DNS  }}
        USER_NAME: ${{ secrets.LOCAL_USER  }}        
      run: |
        echo "$PRIVATE_KEY" > private_key.pem && chmod 600 private_key.pem        
        ssh -o StrictHostKeyChecking=no -i private_key.pem ${USER_NAME}@${HOSTNAME} '
          pkill java
          rm -rf /home/ubuntu/api
          git clone https://github.com/brunogenerali/Challenge_DevOps-2.git api
          cd api
          git checkout main
          git pull origin main
          mvn clean -Dmaven.test.skip package
          java -Dspring.profiles.active=prod -DDATASOURCE_URL=jdbc:mysql://localhost/vollmed_api -DDATASOURCE_USERNAME=root -DDATASOURCE_PASSWORD=root -jar target/api-0.0.1-SNAPSHOT.jar &
        '
        rm -rf private_key.pem

    # - name: Publish to GitHub Packages Apache Maven
    #   run: mvn deploy -s $GITHUB_WORKSPACE/settings.xml
    #   env:
    #     GITHUB_TOKEN: ${{ github.token }}